use std::println;
use std::range;
use std::Str;
use std::int;

const FIVE = 5;

struct Test {
    a: int,
    b: int,
}

impl Test {
    fn sum(self: Test) -> int {
        self.a + self.b
    }

    fn classify(self: Test) -> Str {
        if self.a < self.b {
            "a is less than b"
        } else if self.a > self.b {
            "a is greater than b"
        } else {
            "a is equal to b"
        }
    }
}

fn alter_and_sum(map: Test) -> int {
    map.b = FIVE - 20;
    Test::sum(map)
}

fn main() {
    let test = Test {
        a: 5,
        b: 9,
    };

    /* FN CALL */
    let sum = alter_and_sum(test);
    let expected = sum == -10;

    /* FORMAT STRING */
    println("sum = {sum}; expected = {expected}");

    /* METHOD CALL */
    let vs = test.classify();
    println("order: {vs}");

    /* WHILE */
    let i = 0;
    while i < 5 {
        println("while: {i}");
        i = i + 1;
    }

    /* FOR + NUM RANGE */
    for i in range(0, 5).avoid(2) {
        println("for: {i}");
    }

    /* FOR + MAP ENTRIES */
    for key in test.iter() {
        println("in map: {key}");
    }

    /* FOR + VEC ENTRIES */
    let vec = ["one", "two", "three"];

    for key in vec.iter() {
        println("in vec: {key}");
    }
}
